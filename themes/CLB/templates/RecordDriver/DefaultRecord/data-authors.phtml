<?php
$formatProperty = function ($datafield, $name, $label) {
    if (count($datafield) == 0) {
        return '';
    }
    $that = $this;
    $translate = function ($str) use ($that, $label) {
        return $that->transEsc($label . $str);
    };
    return '<span class="author-property-' . $name . '">(' . implode(', ', array_unique(array_map($translate, $datafield))) . ')</span>';
};
$formattedAuthors = [];
$i = 0;
$authId = $this->driver->CLB_getAuthoritySearch();
$primary_authors = $this->driver->CLB_getDeduplicatedPrimaryAuthors();
$count_primary_authors = (count($primary_authors["primary"]));
?>
<?php if (!empty($data[$type])): ?>
  <?php foreach ($data[$type] as $author => $dataFields): ?>
    <?php ob_start(); ?>
    <span class="author-data" property="<?=$this->escapeHtml($schemaLabel)?>">
      <a href="<?=$this->record($this->driver)->getLink('author', $author)?>">
        <?=$this->escapeHtml(rtrim($author, ','))?>
      </a>
      <?php
        // Display additional data using the appropriate translation prefix
        // (for example, to render author roles correctly):
        if (!empty($requiredDataFields)) {
          foreach ($requiredDataFields as $field) {
              $name = $field['name'];
              $prefix = $field['prefix'] ?? '';
              if (isset($dataFields[$name])) {
                  echo $formatProperty($dataFields[$name], $name, $prefix);
              }
          }
	}
	if ($type == 'secondary') {
		$i += $count_primary_authors;
	}
      ?>
    </span>
    <span class="authority">
	<a href="../Authority/Record?id=<?=$authId[$i]?>">
		<i class="ph-user-circle"></i>
	</a>
    </span>
    <?php
      // Strip whitespace before close tags to avoid spaces in front of commas:
      $formattedAuthors[] = trim(preg_replace('/\s+<\//', '</', ob_get_contents()));
      ob_end_clean();
      $i++;
    ?>
  <?php endforeach; ?>
<?php endif; ?>
<?=implode(', ', $formattedAuthors)?>
